apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper
  namespace: argoflow
spec:
  replicas: 1
  serviceName: zookeeper-service
  selector:
    matchLabels:
      component: zookeeper
  template:
    metadata:
      labels:
        component: zookeeper
    spec:
      containers:
      - name: zookeeper
        image: zookeeper:3.4.9
        ports:
        - containerPort: 2181
        volumeMounts:
        - name: zookeeper-persistent-volume
          mountPath: /data
          subPath: zookeeper
        - name: zookeeper-persistent-volume
          mountPath: /datalog
          subPath: zookeeper
        env:
        - name: ZOO_MY_ID
          value: "1"
        - name: ZOO_PORT
          value: "2181"
        - name: ZOO_SERVERS
          value: "server.1=zookeeper-service:2888:3888"
  volumeClaimTemplates:
  - metadata:
      name: zookeeper-persistent-volume
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 5M

---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-service
  namespace: argoflow
spec:
  type: ClusterIP
  selector:
    component: zookeeper
  ports:
    - port: 2181
      targetPort: 2181

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: argoflow
spec:
  replicas: 1
  serviceName: kafka-service
  selector:
    matchLabels:
      component: kafka
  template:
    metadata:
      labels:
        component: kafka
    spec:
      containers:
      - name: kafka
        image: confluentinc/cp-kafka:5.0.0
        ports:
        - containerPort: 9092
        - containerPort: 19092
        volumeMounts:
        - name: kafka-persistent-volume
          mountPath: /var/lib/kafka/data
          subPath: kafka
        env:
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "LISTENER_DOCKER_INTERNAL://kafka-service:19092,LISTENER_DOCKER_EXTERNAL://127.0.0.1:9092"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT"
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: "LISTENER_DOCKER_INTERNAL"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "zookeeper-service:2181"
        - name: KAFKA_BROKER_ID
          value: "1"
        - name: KAFKA_LOG4J_LOGGERS
          value: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
  volumeClaimTemplates:
  - metadata:
      name: kafka-persistent-volume
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi

---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service
  namespace: argoflow
spec:
  type: ClusterIP
  selector:
    component: kafka
  ports:
    - name: external
      port: 9092
      targetPort: 9092
    - name: internal
      port: 19092
      targetPort: 19092

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-proxy
  namespace: argoflow
spec:
  selector:
    matchLabels:
      component: kafka-proxy
  replicas: 1
  template:
    metadata:
      labels:
        component: kafka-proxy
    spec:
      containers:
      - name: kafka-proxy
        image: argoteam/kafka-proxy:master
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - name: tcp
          containerPort: 80
        - name: udp
          containerPort: 8091
        env:
        - name: BROKERS
          value: "kafka-service:19092"
        - name: MAXSIZE # max message size (in KB)
          value: "10"
        - name: REDIS
          value: "redis-service:6379"

---
apiVersion: v1
kind: Service
metadata:
  name: kafka-proxy-service
  namespace: argoflow
spec:
  type: LoadBalancer
  selector:
    component: kafka-proxy
  ports:
    - name: tcp
      port: 80
      targetPort: 80
    - name: udp
      port: 8091
      targetPort: 8091


---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: clickhouse
  namespace: argoflow
spec:
  replicas: 1
  serviceName: clickhouse-service
  selector:
    matchLabels:
      component: clickhouse
  template:
    metadata:
      labels:
        component: clickhouse
    spec:
    #   initContainers:
    #   # To increase the ulimit
    #   - name: increase-the-ulimit
    #     image: busybox
    #     command:
    #     - sh
    #     - -c
    #     - ulimit -n 262144
    #     securityContext:
    #       privileged: true
      containers:
      - name: clickhouse
        image: yandex/clickhouse-server:19.13
        ports:
        - containerPort: 8123
        - containerPort: 9000
        volumeMounts:
        - name: clickhouse-persistent-volume
          mountPath: /var/lib/clickhouse
          subPath: clickhouse
  volumeClaimTemplates:
  - metadata:
      name: clickhouse-persistent-volume
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 512Gi

---
apiVersion: v1
kind: Service
metadata:
  name: clickhouse-service
  namespace: argoflow
spec:
  type: ClusterIP
  selector:
    component: clickhouse
  ports:
    - name: external
      port: 8123
      targetPort: 8123
    - name: internal
      port: 9000
      targetPort: 9000
