apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: clickhouse-bulk
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  serviceName: clickhouse-bulk-service
  selector:
    matchLabels:
      component: clickhouse-bulk
  template:
    metadata:
      labels:
        component: clickhouse-bulk
    spec:
      containers:
      - name: clickhouse-bulk
        image: argoteam/clickhouse-bulk:1.0
        ports:
        - name: tcp
          containerPort: 8124
        env:
        - name: CLICKHOUSE_SERVERS
          value: "http://clickhouse-service:8123"
        - name: CLICKHOUSE_FLUSH_COUNT
          value: "10000"
        - name: CLICKHOUSE_FLUSH_INTERVAL
          value: "1000"
        - name: DUMP_CHECK_INTERVAL
          value: "300"
        - name: CLICKHOUSE_DOWN_TIMEOUT
          value: "180"
        - name: CLICKHOUSE_CONNECT_TIMEOUT
          value: "10"
        - name: CLICKHOUSE_CLEAN_INTERVAL
          value: "30000"
        volumeMounts:
        - name: clickhouse-bulk-persistent-volume
          mountPath: /app/dumps
          subPath: clickhouse_bulk
  volumeClaimTemplates:
  - metadata:
      name: clickhouse-bulk-persistent-volume
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi

---
apiVersion: v1
kind: Service
metadata:
  name: clickhouse-bulk-service
  namespace: {{ .Values.namespace }}
spec:
  type: ClusterIP
  ports:
  - port: 8124
    targetPort: 8124
  selector:
    component: clickhouse-bulk


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clickhouse-proxy
  namespace: {{ .Values.namespace }}
spec:
  selector:
    matchLabels:
      component: clickhouse-proxy
  replicas: 1
  template:
    metadata:
      labels:
        component: clickhouse-proxy
    spec:
      containers:
      - name: clickhouse-proxy
        image: argoteam/clickhouse-proxy:1.5
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - name: tcp
          containerPort: 80
        - name: udp
          containerPort: 8091
        env:
        - name: CLICKHOUSE_INGESTOR__DISABLED
          value: "http://clickhouse-bulk-service:8124"
        - name: CLICKHOUSE
          value: "clickhouse-service:9000"
        - name: LOG_LEVEL
          value: "trace"

---
apiVersion: v1
kind: Service
metadata:
  name: clickhouse-proxy-service
  namespace: {{ .Values.namespace }}
spec:
  type: ClusterIP
  ports:
  - port: 8193
    targetPort: 80
    # we don't use udp port for now
    # - port: 8194
    #   targetPort: 8091
  selector:
    component: clickhouse-proxy

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: {{ .Values.namespace }}
  name: clickhouse-proxy-service-ingress
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "1m"
    nginx.org/client-max-body-size: "1m"
    nginx.ingress.kubernetes.io/enable-cors: "false"
spec:
  ingressClassName: nginx
  rules:
    - host: {{ .Values.clickhouseProxy.host }}
      http:
        paths:
          - path: /
            pathType: ImplementationSpecific
            backend:
              service:
                name: clickhouse-proxy-service
                port:
                  number: 8193


# disable logs
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: clickhouse-configs
  namespace: {{ .Values.namespace }}
data:
  disable_logs.xml: |
    <clickhouse>
        <logger>
          <!-- Possible levels [1]:

            - none (turns off logging)
            - fatal
            - critical
            - error
            - warning
            - notice
            - information
            - debug
            - trace
            - test (not for production usage)

              [1]: https://github.com/pocoproject/poco/blob/poco-1.9.4-release/Foundation/include/Poco/Logger.h#L105-L114
          -->
          <level>error</level>
        </logger>
        <query_log>
            <flush_interval_milliseconds>0</flush_interval_milliseconds>
        </query_log>
        <trace_log>
            <flush_interval_milliseconds>0</flush_interval_milliseconds>
        </trace_log>
        <query_thread_log>
            <flush_interval_milliseconds>0</flush_interval_milliseconds>
        </query_thread_log>
        <query_views_log>
            <flush_interval_milliseconds>0</flush_interval_milliseconds>
        </query_views_log>
        <part_log>
            <flush_interval_milliseconds>0</flush_interval_milliseconds>
        </part_log>
        <metric_log>
            <collect_interval_milliseconds>0</collect_interval_milliseconds>
        </metric_log>
        <asynchronous_metric_log>
            <flush_interval_milliseconds>0</flush_interval_milliseconds>
        </asynchronous_metric_log>
        <opentelemetry_span_log>
            <flush_interval_milliseconds>0</flush_interval_milliseconds>
        </opentelemetry_span_log>
        <processors_profile_log>
            <flush_interval_milliseconds>0</flush_interval_milliseconds>
        </processors_profile_log>
        <asynchronous_insert_log>
            <flush_interval_milliseconds>0</flush_interval_milliseconds>
        </asynchronous_insert_log>
    </clickhouse>

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: clickhouse
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  serviceName: clickhouse-service
  selector:
    matchLabels:
      component: clickhouse
  template:
    metadata:
      labels:
        component: clickhouse
    spec:
      containers:
      - name: clickhouse
        image: clickhouse/clickhouse-server:23.7.4
        ports:
        - containerPort: 8123
        - containerPort: 9000
        volumeMounts:
        - name: clickhouse-persistent-volume
          mountPath: /var/lib/clickhouse
          # subPath: clickhouse
        - name: clickhouse-configs-volume
          mountPath: /etc/clickhouse/config.d
      volumes:
      - name: clickhouse-configs-volume
        configMap:
          name: clickhouse-configs
          items:
            - key: disable_logs.xml
              path: disable_logs.xml
  volumeClaimTemplates:
  - metadata:
      name: clickhouse-persistent-volume
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 32Gi

--- 
apiVersion: batch/v1
kind: CronJob
metadata:
  name: clickhouse-backup
  namespace: {{ .Values.namespace }}
spec:
  schedule: "15 2 * * *"  # Runs every day at 2:15 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: clickhouse-backup
            image: altinity/clickhouse-backup:latest
            env:
            - name: CLICKHOUSE_HOST
              value: "clickhouse-service"
            - name: CLICKHOUSE_PORT
              value: "9000"
            - name: CLICKHOUSE_PASSWORD
              value: ""
            - name: S3_BUCKET
              value: "{{ .Values.clickhouseBackup.S3Bucket }}"
            - name: S3_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: clickhouse-backup
                  key: S3_ACCESS_KEY
            - name: S3_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: clickhouse-backup
                  key: S3_SECRET_KEY
            - name: S3_REGION
              value: "{{ .Values.clickhouseBackup.S3Region }}"
            - name: S3_PATH
              value: "{{ .Values.clickhouseBackup.S3Path }}"
            - name: REMOTE_STORAGE
              value: "{{ .Values.clickhouseBackup.RemoteStorage }}"
            volumeMounts:
            - name: clickhouse-persistent-volume
              mountPath: /var/lib/clickhouse  # This is where ClickHouse data is stored
            command:
              - /bin/sh
              - -c
              - |
                echo "Running backup..."
                DAY=$(date +%d);
                if [ $DAY = 01 ]
                then
                  BACKUP_NAME=backup_$(date -u +%Y-%m-%d)
                else
                  BACKUP_NAME=backup_daily
                fi
                clickhouse-backup create $BACKUP_NAME
                echo "Backup completed."
          restartPolicy: OnFailure  # Retries the job in case of failure
          volumes:
          - name: clickhouse-persistent-volume
            persistentVolumeClaim:
              claimName: clickhouse-persistent-volume-clickhouse-0
      backoffLimit: 3  # Number of retries before marking the job as failed

---
apiVersion: v1
kind: Service
metadata:
  name: clickhouse-service
  namespace: {{ .Values.namespace }}
spec:
  type: ClusterIP
  selector:
    component: clickhouse
  ports:
    - name: external
      port: 8123
      targetPort: 8123
    - name: internal
      port: 9000
      targetPort: 9000
